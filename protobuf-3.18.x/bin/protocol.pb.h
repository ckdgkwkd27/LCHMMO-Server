// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto;
namespace protocol {
class ChatRequest;
struct ChatRequestDefaultTypeInternal;
extern ChatRequestDefaultTypeInternal _ChatRequest_default_instance_;
class ChatResult;
struct ChatResultDefaultTypeInternal;
extern ChatResultDefaultTypeInternal _ChatResult_default_instance_;
class LoginRequest;
struct LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResult;
struct LoginResultDefaultTypeInternal;
extern LoginResultDefaultTypeInternal _LoginResult_default_instance_;
class MoveRequest;
struct MoveRequestDefaultTypeInternal;
extern MoveRequestDefaultTypeInternal _MoveRequest_default_instance_;
class MoveResult;
struct MoveResultDefaultTypeInternal;
extern MoveResultDefaultTypeInternal _MoveResult_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::ChatRequest* Arena::CreateMaybeMessage<::protocol::ChatRequest>(Arena*);
template<> ::protocol::ChatResult* Arena::CreateMaybeMessage<::protocol::ChatResult>(Arena*);
template<> ::protocol::LoginRequest* Arena::CreateMaybeMessage<::protocol::LoginRequest>(Arena*);
template<> ::protocol::LoginResult* Arena::CreateMaybeMessage<::protocol::LoginResult>(Arena*);
template<> ::protocol::MoveRequest* Arena::CreateMaybeMessage<::protocol::MoveRequest>(Arena*);
template<> ::protocol::MoveResult* Arena::CreateMaybeMessage<::protocol::MoveResult>(Arena*);
template<> ::protocol::Position* Arena::CreateMaybeMessage<::protocol::Position>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

enum MessageType : int {
  PKT_CS_LOGIN = 0,
  PKT_SC_LOGIN = 1,
  PKT_CS_CHAT = 2,
  PKT_SC_CHAT = 3,
  PKT_CS_MOVE = 4,
  PKT_SC_MOVE = 5,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = PKT_CS_LOGIN;
constexpr MessageType MessageType_MAX = PKT_SC_MOVE;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class LoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {}
  ~LoginRequest() override;
  explicit constexpr LoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return new LoginRequest();
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.LoginRequest";
  }
  protected:
  explicit LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // int64 PlayerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int64 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.LoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit constexpr Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return new Position();
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Position& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class LoginResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.LoginResult) */ {
 public:
  inline LoginResult() : LoginResult(nullptr) {}
  ~LoginResult() override;
  explicit constexpr LoginResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginResult(const LoginResult& from);
  LoginResult(LoginResult&& from) noexcept
    : LoginResult() {
    *this = ::std::move(from);
  }

  inline LoginResult& operator=(const LoginResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResult& operator=(LoginResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginResult* internal_default_instance() {
    return reinterpret_cast<const LoginResult*>(
               &_LoginResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginResult& a, LoginResult& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResult* New() const final {
    return new LoginResult();
  }

  LoginResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.LoginResult";
  }
  protected:
  explicit LoginResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 2,
    kPlayerPosFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
  };
  // string PlayerName = 2;
  void clear_playername();
  const std::string& playername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playername();
  PROTOBUF_MUST_USE_RESULT std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  private:
  const std::string& _internal_playername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // .protocol.Position PlayerPos = 3;
  bool has_playerpos() const;
  private:
  bool _internal_has_playerpos() const;
  public:
  void clear_playerpos();
  const ::protocol::Position& playerpos() const;
  PROTOBUF_MUST_USE_RESULT ::protocol::Position* release_playerpos();
  ::protocol::Position* mutable_playerpos();
  void set_allocated_playerpos(::protocol::Position* playerpos);
  private:
  const ::protocol::Position& _internal_playerpos() const;
  ::protocol::Position* _internal_mutable_playerpos();
  public:
  void unsafe_arena_set_allocated_playerpos(
      ::protocol::Position* playerpos);
  ::protocol::Position* unsafe_arena_release_playerpos();

  // int64 PlayerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int64 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.LoginResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
  ::protocol::Position* playerpos_;
  ::PROTOBUF_NAMESPACE_ID::int64 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class ChatRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ChatRequest) */ {
 public:
  inline ChatRequest() : ChatRequest(nullptr) {}
  ~ChatRequest() override;
  explicit constexpr ChatRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatRequest(const ChatRequest& from);
  ChatRequest(ChatRequest&& from) noexcept
    : ChatRequest() {
    *this = ::std::move(from);
  }

  inline ChatRequest& operator=(const ChatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatRequest& operator=(ChatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatRequest* internal_default_instance() {
    return reinterpret_cast<const ChatRequest*>(
               &_ChatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChatRequest& a, ChatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatRequest* New() const final {
    return new ChatRequest();
  }

  ChatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ChatRequest";
  }
  protected:
  explicit ChatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerMessageFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // string PlayerMessage = 2;
  void clear_playermessage();
  const std::string& playermessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playermessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playermessage();
  PROTOBUF_MUST_USE_RESULT std::string* release_playermessage();
  void set_allocated_playermessage(std::string* playermessage);
  private:
  const std::string& _internal_playermessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playermessage(const std::string& value);
  std::string* _internal_mutable_playermessage();
  public:

  // int64 PlayerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int64 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.ChatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playermessage_;
  ::PROTOBUF_NAMESPACE_ID::int64 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class ChatResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ChatResult) */ {
 public:
  inline ChatResult() : ChatResult(nullptr) {}
  ~ChatResult() override;
  explicit constexpr ChatResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatResult(const ChatResult& from);
  ChatResult(ChatResult&& from) noexcept
    : ChatResult() {
    *this = ::std::move(from);
  }

  inline ChatResult& operator=(const ChatResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatResult& operator=(ChatResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatResult* internal_default_instance() {
    return reinterpret_cast<const ChatResult*>(
               &_ChatResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChatResult& a, ChatResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatResult* New() const final {
    return new ChatResult();
  }

  ChatResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ChatResult";
  }
  protected:
  explicit ChatResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 1,
    kPlayerMessageFieldNumber = 2,
  };
  // string PlayerName = 1;
  void clear_playername();
  const std::string& playername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playername();
  PROTOBUF_MUST_USE_RESULT std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  private:
  const std::string& _internal_playername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // string PlayerMessage = 2;
  void clear_playermessage();
  const std::string& playermessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playermessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playermessage();
  PROTOBUF_MUST_USE_RESULT std::string* release_playermessage();
  void set_allocated_playermessage(std::string* playermessage);
  private:
  const std::string& _internal_playermessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playermessage(const std::string& value);
  std::string* _internal_mutable_playermessage();
  public:

  // @@protoc_insertion_point(class_scope:protocol.ChatResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playermessage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class MoveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.MoveRequest) */ {
 public:
  inline MoveRequest() : MoveRequest(nullptr) {}
  ~MoveRequest() override;
  explicit constexpr MoveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveRequest(const MoveRequest& from);
  MoveRequest(MoveRequest&& from) noexcept
    : MoveRequest() {
    *this = ::std::move(from);
  }

  inline MoveRequest& operator=(const MoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveRequest& operator=(MoveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveRequest* internal_default_instance() {
    return reinterpret_cast<const MoveRequest*>(
               &_MoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MoveRequest& a, MoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveRequest* New() const final {
    return new MoveRequest();
  }

  MoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MoveRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.MoveRequest";
  }
  protected:
  explicit MoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerPosFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // .protocol.Position PlayerPos = 2;
  bool has_playerpos() const;
  private:
  bool _internal_has_playerpos() const;
  public:
  void clear_playerpos();
  const ::protocol::Position& playerpos() const;
  PROTOBUF_MUST_USE_RESULT ::protocol::Position* release_playerpos();
  ::protocol::Position* mutable_playerpos();
  void set_allocated_playerpos(::protocol::Position* playerpos);
  private:
  const ::protocol::Position& _internal_playerpos() const;
  ::protocol::Position* _internal_mutable_playerpos();
  public:
  void unsafe_arena_set_allocated_playerpos(
      ::protocol::Position* playerpos);
  ::protocol::Position* unsafe_arena_release_playerpos();

  // int64 PlayerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int64 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.MoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protocol::Position* playerpos_;
  ::PROTOBUF_NAMESPACE_ID::int64 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class MoveResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.MoveResult) */ {
 public:
  inline MoveResult() : MoveResult(nullptr) {}
  ~MoveResult() override;
  explicit constexpr MoveResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveResult(const MoveResult& from);
  MoveResult(MoveResult&& from) noexcept
    : MoveResult() {
    *this = ::std::move(from);
  }

  inline MoveResult& operator=(const MoveResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveResult& operator=(MoveResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveResult* internal_default_instance() {
    return reinterpret_cast<const MoveResult*>(
               &_MoveResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MoveResult& a, MoveResult& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveResult* New() const final {
    return new MoveResult();
  }

  MoveResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MoveResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.MoveResult";
  }
  protected:
  explicit MoveResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerPosFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // .protocol.Position PlayerPos = 2;
  bool has_playerpos() const;
  private:
  bool _internal_has_playerpos() const;
  public:
  void clear_playerpos();
  const ::protocol::Position& playerpos() const;
  PROTOBUF_MUST_USE_RESULT ::protocol::Position* release_playerpos();
  ::protocol::Position* mutable_playerpos();
  void set_allocated_playerpos(::protocol::Position* playerpos);
  private:
  const ::protocol::Position& _internal_playerpos() const;
  ::protocol::Position* _internal_mutable_playerpos();
  public:
  void unsafe_arena_set_allocated_playerpos(
      ::protocol::Position* playerpos);
  ::protocol::Position* unsafe_arena_release_playerpos();

  // int64 PlayerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int64 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.MoveResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::protocol::Position* playerpos_;
  ::PROTOBUF_NAMESPACE_ID::int64 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginRequest

// int64 PlayerId = 1;
inline void LoginRequest::clear_playerid() {
  playerid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoginRequest::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoginRequest::playerid() const {
  // @@protoc_insertion_point(field_get:protocol.LoginRequest.PlayerId)
  return _internal_playerid();
}
inline void LoginRequest::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  playerid_ = value;
}
inline void LoginRequest::set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:protocol.LoginRequest.PlayerId)
}

// -------------------------------------------------------------------

// Position

// float x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline float Position::_internal_x() const {
  return x_;
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:protocol.Position.x)
  return _internal_x();
}
inline void Position::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Position::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:protocol.Position.x)
}

// float y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline float Position::_internal_y() const {
  return y_;
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:protocol.Position.y)
  return _internal_y();
}
inline void Position::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Position::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:protocol.Position.y)
}

// float z = 3;
inline void Position::clear_z() {
  z_ = 0;
}
inline float Position::_internal_z() const {
  return z_;
}
inline float Position::z() const {
  // @@protoc_insertion_point(field_get:protocol.Position.z)
  return _internal_z();
}
inline void Position::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Position::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:protocol.Position.z)
}

// -------------------------------------------------------------------

// LoginResult

// int64 PlayerId = 1;
inline void LoginResult::clear_playerid() {
  playerid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoginResult::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoginResult::playerid() const {
  // @@protoc_insertion_point(field_get:protocol.LoginResult.PlayerId)
  return _internal_playerid();
}
inline void LoginResult::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  playerid_ = value;
}
inline void LoginResult::set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:protocol.LoginResult.PlayerId)
}

// string PlayerName = 2;
inline void LoginResult::clear_playername() {
  playername_.ClearToEmpty();
}
inline const std::string& LoginResult::playername() const {
  // @@protoc_insertion_point(field_get:protocol.LoginResult.PlayerName)
  return _internal_playername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginResult::set_playername(ArgT0&& arg0, ArgT... args) {
 
 playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.LoginResult.PlayerName)
}
inline std::string* LoginResult::mutable_playername() {
  std::string* _s = _internal_mutable_playername();
  // @@protoc_insertion_point(field_mutable:protocol.LoginResult.PlayerName)
  return _s;
}
inline const std::string& LoginResult::_internal_playername() const {
  return playername_.Get();
}
inline void LoginResult::_internal_set_playername(const std::string& value) {
  
  playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginResult::_internal_mutable_playername() {
  
  return playername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginResult::release_playername() {
  // @@protoc_insertion_point(field_release:protocol.LoginResult.PlayerName)
  return playername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginResult::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    
  } else {
    
  }
  playername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playername,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.LoginResult.PlayerName)
}

// .protocol.Position PlayerPos = 3;
inline bool LoginResult::_internal_has_playerpos() const {
  return this != internal_default_instance() && playerpos_ != nullptr;
}
inline bool LoginResult::has_playerpos() const {
  return _internal_has_playerpos();
}
inline void LoginResult::clear_playerpos() {
  if (GetArenaForAllocation() == nullptr && playerpos_ != nullptr) {
    delete playerpos_;
  }
  playerpos_ = nullptr;
}
inline const ::protocol::Position& LoginResult::_internal_playerpos() const {
  const ::protocol::Position* p = playerpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Position&>(
      ::protocol::_Position_default_instance_);
}
inline const ::protocol::Position& LoginResult::playerpos() const {
  // @@protoc_insertion_point(field_get:protocol.LoginResult.PlayerPos)
  return _internal_playerpos();
}
inline void LoginResult::unsafe_arena_set_allocated_playerpos(
    ::protocol::Position* playerpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerpos_);
  }
  playerpos_ = playerpos;
  if (playerpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.LoginResult.PlayerPos)
}
inline ::protocol::Position* LoginResult::release_playerpos() {
  
  ::protocol::Position* temp = playerpos_;
  playerpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Position* LoginResult::unsafe_arena_release_playerpos() {
  // @@protoc_insertion_point(field_release:protocol.LoginResult.PlayerPos)
  
  ::protocol::Position* temp = playerpos_;
  playerpos_ = nullptr;
  return temp;
}
inline ::protocol::Position* LoginResult::_internal_mutable_playerpos() {
  
  if (playerpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Position>(GetArenaForAllocation());
    playerpos_ = p;
  }
  return playerpos_;
}
inline ::protocol::Position* LoginResult::mutable_playerpos() {
  ::protocol::Position* _msg = _internal_mutable_playerpos();
  // @@protoc_insertion_point(field_mutable:protocol.LoginResult.PlayerPos)
  return _msg;
}
inline void LoginResult::set_allocated_playerpos(::protocol::Position* playerpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete playerpos_;
  }
  if (playerpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protocol::Position>::GetOwningArena(playerpos);
    if (message_arena != submessage_arena) {
      playerpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerpos, submessage_arena);
    }
    
  } else {
    
  }
  playerpos_ = playerpos;
  // @@protoc_insertion_point(field_set_allocated:protocol.LoginResult.PlayerPos)
}

// -------------------------------------------------------------------

// ChatRequest

// int64 PlayerId = 1;
inline void ChatRequest::clear_playerid() {
  playerid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChatRequest::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChatRequest::playerid() const {
  // @@protoc_insertion_point(field_get:protocol.ChatRequest.PlayerId)
  return _internal_playerid();
}
inline void ChatRequest::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  playerid_ = value;
}
inline void ChatRequest::set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:protocol.ChatRequest.PlayerId)
}

// string PlayerMessage = 2;
inline void ChatRequest::clear_playermessage() {
  playermessage_.ClearToEmpty();
}
inline const std::string& ChatRequest::playermessage() const {
  // @@protoc_insertion_point(field_get:protocol.ChatRequest.PlayerMessage)
  return _internal_playermessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatRequest::set_playermessage(ArgT0&& arg0, ArgT... args) {
 
 playermessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ChatRequest.PlayerMessage)
}
inline std::string* ChatRequest::mutable_playermessage() {
  std::string* _s = _internal_mutable_playermessage();
  // @@protoc_insertion_point(field_mutable:protocol.ChatRequest.PlayerMessage)
  return _s;
}
inline const std::string& ChatRequest::_internal_playermessage() const {
  return playermessage_.Get();
}
inline void ChatRequest::_internal_set_playermessage(const std::string& value) {
  
  playermessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatRequest::_internal_mutable_playermessage() {
  
  return playermessage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatRequest::release_playermessage() {
  // @@protoc_insertion_point(field_release:protocol.ChatRequest.PlayerMessage)
  return playermessage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatRequest::set_allocated_playermessage(std::string* playermessage) {
  if (playermessage != nullptr) {
    
  } else {
    
  }
  playermessage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playermessage,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.ChatRequest.PlayerMessage)
}

// -------------------------------------------------------------------

// ChatResult

// string PlayerName = 1;
inline void ChatResult::clear_playername() {
  playername_.ClearToEmpty();
}
inline const std::string& ChatResult::playername() const {
  // @@protoc_insertion_point(field_get:protocol.ChatResult.PlayerName)
  return _internal_playername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatResult::set_playername(ArgT0&& arg0, ArgT... args) {
 
 playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ChatResult.PlayerName)
}
inline std::string* ChatResult::mutable_playername() {
  std::string* _s = _internal_mutable_playername();
  // @@protoc_insertion_point(field_mutable:protocol.ChatResult.PlayerName)
  return _s;
}
inline const std::string& ChatResult::_internal_playername() const {
  return playername_.Get();
}
inline void ChatResult::_internal_set_playername(const std::string& value) {
  
  playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatResult::_internal_mutable_playername() {
  
  return playername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatResult::release_playername() {
  // @@protoc_insertion_point(field_release:protocol.ChatResult.PlayerName)
  return playername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatResult::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    
  } else {
    
  }
  playername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playername,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.ChatResult.PlayerName)
}

// string PlayerMessage = 2;
inline void ChatResult::clear_playermessage() {
  playermessage_.ClearToEmpty();
}
inline const std::string& ChatResult::playermessage() const {
  // @@protoc_insertion_point(field_get:protocol.ChatResult.PlayerMessage)
  return _internal_playermessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatResult::set_playermessage(ArgT0&& arg0, ArgT... args) {
 
 playermessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.ChatResult.PlayerMessage)
}
inline std::string* ChatResult::mutable_playermessage() {
  std::string* _s = _internal_mutable_playermessage();
  // @@protoc_insertion_point(field_mutable:protocol.ChatResult.PlayerMessage)
  return _s;
}
inline const std::string& ChatResult::_internal_playermessage() const {
  return playermessage_.Get();
}
inline void ChatResult::_internal_set_playermessage(const std::string& value) {
  
  playermessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatResult::_internal_mutable_playermessage() {
  
  return playermessage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatResult::release_playermessage() {
  // @@protoc_insertion_point(field_release:protocol.ChatResult.PlayerMessage)
  return playermessage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatResult::set_allocated_playermessage(std::string* playermessage) {
  if (playermessage != nullptr) {
    
  } else {
    
  }
  playermessage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playermessage,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protocol.ChatResult.PlayerMessage)
}

// -------------------------------------------------------------------

// MoveRequest

// int64 PlayerId = 1;
inline void MoveRequest::clear_playerid() {
  playerid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MoveRequest::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MoveRequest::playerid() const {
  // @@protoc_insertion_point(field_get:protocol.MoveRequest.PlayerId)
  return _internal_playerid();
}
inline void MoveRequest::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  playerid_ = value;
}
inline void MoveRequest::set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:protocol.MoveRequest.PlayerId)
}

// .protocol.Position PlayerPos = 2;
inline bool MoveRequest::_internal_has_playerpos() const {
  return this != internal_default_instance() && playerpos_ != nullptr;
}
inline bool MoveRequest::has_playerpos() const {
  return _internal_has_playerpos();
}
inline void MoveRequest::clear_playerpos() {
  if (GetArenaForAllocation() == nullptr && playerpos_ != nullptr) {
    delete playerpos_;
  }
  playerpos_ = nullptr;
}
inline const ::protocol::Position& MoveRequest::_internal_playerpos() const {
  const ::protocol::Position* p = playerpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Position&>(
      ::protocol::_Position_default_instance_);
}
inline const ::protocol::Position& MoveRequest::playerpos() const {
  // @@protoc_insertion_point(field_get:protocol.MoveRequest.PlayerPos)
  return _internal_playerpos();
}
inline void MoveRequest::unsafe_arena_set_allocated_playerpos(
    ::protocol::Position* playerpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerpos_);
  }
  playerpos_ = playerpos;
  if (playerpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.MoveRequest.PlayerPos)
}
inline ::protocol::Position* MoveRequest::release_playerpos() {
  
  ::protocol::Position* temp = playerpos_;
  playerpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Position* MoveRequest::unsafe_arena_release_playerpos() {
  // @@protoc_insertion_point(field_release:protocol.MoveRequest.PlayerPos)
  
  ::protocol::Position* temp = playerpos_;
  playerpos_ = nullptr;
  return temp;
}
inline ::protocol::Position* MoveRequest::_internal_mutable_playerpos() {
  
  if (playerpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Position>(GetArenaForAllocation());
    playerpos_ = p;
  }
  return playerpos_;
}
inline ::protocol::Position* MoveRequest::mutable_playerpos() {
  ::protocol::Position* _msg = _internal_mutable_playerpos();
  // @@protoc_insertion_point(field_mutable:protocol.MoveRequest.PlayerPos)
  return _msg;
}
inline void MoveRequest::set_allocated_playerpos(::protocol::Position* playerpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete playerpos_;
  }
  if (playerpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protocol::Position>::GetOwningArena(playerpos);
    if (message_arena != submessage_arena) {
      playerpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerpos, submessage_arena);
    }
    
  } else {
    
  }
  playerpos_ = playerpos;
  // @@protoc_insertion_point(field_set_allocated:protocol.MoveRequest.PlayerPos)
}

// -------------------------------------------------------------------

// MoveResult

// int64 PlayerId = 1;
inline void MoveResult::clear_playerid() {
  playerid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MoveResult::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MoveResult::playerid() const {
  // @@protoc_insertion_point(field_get:protocol.MoveResult.PlayerId)
  return _internal_playerid();
}
inline void MoveResult::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  playerid_ = value;
}
inline void MoveResult::set_playerid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:protocol.MoveResult.PlayerId)
}

// .protocol.Position PlayerPos = 2;
inline bool MoveResult::_internal_has_playerpos() const {
  return this != internal_default_instance() && playerpos_ != nullptr;
}
inline bool MoveResult::has_playerpos() const {
  return _internal_has_playerpos();
}
inline void MoveResult::clear_playerpos() {
  if (GetArenaForAllocation() == nullptr && playerpos_ != nullptr) {
    delete playerpos_;
  }
  playerpos_ = nullptr;
}
inline const ::protocol::Position& MoveResult::_internal_playerpos() const {
  const ::protocol::Position* p = playerpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Position&>(
      ::protocol::_Position_default_instance_);
}
inline const ::protocol::Position& MoveResult::playerpos() const {
  // @@protoc_insertion_point(field_get:protocol.MoveResult.PlayerPos)
  return _internal_playerpos();
}
inline void MoveResult::unsafe_arena_set_allocated_playerpos(
    ::protocol::Position* playerpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerpos_);
  }
  playerpos_ = playerpos;
  if (playerpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.MoveResult.PlayerPos)
}
inline ::protocol::Position* MoveResult::release_playerpos() {
  
  ::protocol::Position* temp = playerpos_;
  playerpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Position* MoveResult::unsafe_arena_release_playerpos() {
  // @@protoc_insertion_point(field_release:protocol.MoveResult.PlayerPos)
  
  ::protocol::Position* temp = playerpos_;
  playerpos_ = nullptr;
  return temp;
}
inline ::protocol::Position* MoveResult::_internal_mutable_playerpos() {
  
  if (playerpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Position>(GetArenaForAllocation());
    playerpos_ = p;
  }
  return playerpos_;
}
inline ::protocol::Position* MoveResult::mutable_playerpos() {
  ::protocol::Position* _msg = _internal_mutable_playerpos();
  // @@protoc_insertion_point(field_mutable:protocol.MoveResult.PlayerPos)
  return _msg;
}
inline void MoveResult::set_allocated_playerpos(::protocol::Position* playerpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete playerpos_;
  }
  if (playerpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protocol::Position>::GetOwningArena(playerpos);
    if (message_arena != submessage_arena) {
      playerpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerpos, submessage_arena);
    }
    
  } else {
    
  }
  playerpos_ = playerpos;
  // @@protoc_insertion_point(field_set_allocated:protocol.MoveResult.PlayerPos)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protocol::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::MessageType>() {
  return ::protocol::MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
